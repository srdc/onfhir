# General server configurations
server {
  # Hostname that onFhir server will work. Using 0.0.0.0 will bind the server to both localhost and the IP of the server that you deploy it
  host = 0.0.0.0
  # Port that onFhir server will listen
  port = 8080
  # Base Uri for onFhir server e.g. With this default configuration, the root path of the FHIR server will be http://localhost:8080/fhir
  base-uri = fhir
  ssl {
    # Path to the java keystore for enabling ssl for onFhir server, use null to disable ssl
    keystore = null
    # Password of the keystore for enabling ssl for onFhir server
    password = null
  }
}
# FHIR related configurations
fhir {
  # When true, then for every restart of the server, it reads the FHIR configuration files, configure the onFhir accordingly and then setup/update the onFhir.io database. This should be true if executed for the first time.
  # When false, then for every restart of the server, it configures the onFhir by reading the existing configurations from the database.
  initialize = true
  # Root URL for Server Access (this can be different from server.properties due to deployment alternatives especially when you are deploying the server behind a proxy)
  root-url = "http://127.0.0.1:8080/fhir"
  # Root URL for FHIR Infrastructure Resource definitions (Conformance, StructureDefinition, etc), if null this will be same with root-url. This can be a canonical URL.
  definitions-url = null

  # Validation alternatives for FHIR resources to be created/updated
  # base => Validation against base HL7 FHIR resources and profiles
  # profile => Validation against all provided profiles
  # none => Disable resource validation
  validation = "profile"

  # Default search mechanism handling alternative (if not given by the client See https://www.hl7.org/fhir/search.html)
  # handling=lenient => Ignores unknown/unsupported parameters and perform search
  # handling=strict => Returns an error if unknown/unsupported parameters are used by the client
  search-handling = "handling=strict"

  # Configuration files (as FHIR Foundational resources) for FHIR capabilities of the server, all paths should be absolute or relative to the location of application.conf file.
  initialization {
    # Path to definitions.zip that includes the base standart FHIR definitions (e.g. for R4 or STU3), if null the default definitions.zip file downloaded from FHIR website for the FHIR version is used.
    base-definitions-path = null

    # CapabilityStatement file path for the onFHIR server. This file is the main entrypoint for onFHIR server configuration for required FHIR capabilities. If not given a full capability statement given by FHIR base standart will be used.
    conformance-path = null

    # Path to the zip file or folder that includes the FHIR resource and data type profile definitions (FHIR StructureDefinition) to be used in this instance of onFHIR server
    profiles-path = null

    # Path to the zip file or folder that includes the extra FHIR search parameter definitions (FHIR SearchParameter) in addition to parameters defined by the base standart that you mention in CapabilityStatement
    parameters-path = null

    # Path to the zip file or folder that includes the FHIR compartment definitions (FHIR CompartmentDefinition) for compartment search. Only the compartments listed here and mentioned in CapabilityStatement will be supported.
    compartments-path = null

    # Path to the zip file or folder that includes the FHIR Value Set definitions (FHIR ValueSet) that are referenced by your FHIR profiles. (Used in validations)
    valuesets-path = null

    # Path to the zip file or folder that includes the FHIR Code system definitions (FHIR CodeSystem) that are referenced by your FHIR value sets (Not used currently, to be used later for validation)
    codesystems-path = null

    # Path to the zip file or folder that includes the definitions of FHIR Operations  (FHIR OperationDefinition) that you want to support by this instance of OnFhir instance
    operations-path = null

    # Path to the onFhir database index configuration file (JSON format) indicating the database indexes and shard keys for each resource types supported. If not given, default file given under the specific FHIR version module (onfhir-server-r4/db-index-conf.json) will be used.
    index-conf-path = null
  }

  # Default settings while configuring FHIR capabilities
  default {
    # Default preference to return in HTTP responses. Can be either 'minimal' or 'representation'. See https://www.hl7.org/fhir/http.html#ops
    return-preference = representation
    # Default page count (number of resource instances) when returning results from FHIR history and search interactions. See https://www.hl7.org/fhir/http.html#paging
    page-count = 20
    # Default value for [CapabilityStatement|Conformance].rest.resource.versioning when not present in CapabilityStatenent for the resource type
    # Indicating that versioning is supported or not for the resource type. See https://www.hl7.org/fhir/valueset-versioning-policy.html
    versioning = "versioned"
    # Default value for [CapabilityStatement|Conformance].rest.resource.readHistory when not present in CapabilityStatenent for the resource type
    # Indicates whether server  can return past versions for FHIR vRead interaction. See https://www.hl7.org/fhir/capabilitystatement-definitions.html#CapabilityStatement.rest.resource.readHistory
    read-history = false
    # Default value for [CapabilityStatement|Conformance].rest.resource.updateCreate when not present in CapabilityStatenent for the resource type
    # Indicates whether FHIR updates can create a new resource if any resource does not exist with the given resource id. See https://www.hl7.org/fhir/capabilitystatement-definitions.html#CapabilityStatement.rest.resource.updateCreate
    update-create = true
    # Default value for [CapabilityStatement|Conformance].rest.resource.conditionalCreate when not present in CapabilityStatenent for the resource type
    # Indicates whether FHIR conditional create is supported. See https://www.hl7.org/fhir/capabilitystatement-definitions.html#CapabilityStatement.rest.resource.conditionalCreate
    conditional-create = false
    # Default value for [CapabilityStatement|Conformance].rest.resource.conditionalUpdate when not present in CapabilityStatenent for the resource type
    # Indicates whether FHIR conditional update is supported. See https://www.hl7.org/fhir/capabilitystatement-definitions.html#CapabilityStatement.rest.resource.conditionalUpdate
    conditional-update = false
    # Default value for [CapabilityStatement|Conformance].rest.resource.conditionalDelete when not present in CapabilityStatenent for the resource type
    # Indicates the version of supporte FHIR conditional delete mechanism. See https://www.hl7.org/fhir/capabilitystatement-definitions.html#CapabilityStatement.rest.resource.conditionalDelete
    conditional-delete = "not-supported"
  }

  # Authorization settings for the onFhir server (based on OperID Connect or OAuth2.0 standards)
  authorization {
    # Authorization mechanism applied in this repo
    # none -> No Authorization
    # smart-on-fhir -> Smart on FHIR compliant authorization. See https://docs.smarthealthit.org/authorization/
    # custom --> Custom authorization. For this you need to implement a custom authorization module implementing io.onfhir.authz.IAAuthorizer trait and register it to onFhir.
    method = "none"
    # Indicates how the access token will be resolved
    # introspection --> By OAuth2 introspection. This will need a introspection endpoint configured within the authorization-server-metadata.json
    # jwt --> Direct JWT evaluation. This assumes that access tokens are JWTs signed by the authorization server
    # jwt-introspection --> JWT with introspection. This will need a introspection endpoint configured within the authorization-server-metadata.json
    token-resolution = "introspection"
    #If token resolution is via jwt, the signature algorithm
    #token-resolution-signature-algorithm = "HS256"
    #If token resolution is via jwt, the signature secret
    #token-resolution-signature-secret = ""
    # If false, we assume fhir-server is registered to the Authorization Server manually but then we need registration data from configuration (see resource-server-metadata-path.json)
    # If true (Not-implemented yet), we will register fhir-server during set-up
    authz-server-dynamic-registration = false
    # Path for the metadata file which defines onFhir server as protected resource server (OpenID Connect or OAuth2.0), if not given the default metadata will be used
    resource-server-metadata-path = null
    # Path for the JWKS file (including signing keys) for our resource server (onFhir). This is required if authentication method for token introspection requires key based authentication)
    resource-server-jwks-path = null
    # If none, we assume the metadata of Authorization Server will be given by configuration (see  authz-server-metadata-path.json)
    # Other options are;
    # oauth2 -> OAuth2 Discovery. See https://tools.ietf.org/html/draft-ietf-oauth-discovery-06. Then authz-server-discovery-url should be given.
    # oidc -> OpenID Connect discovery. See https://openid.net/specs/openid-connect-discovery-1_0.html. Then authz-server-discovery-url should be given.
    authz-server-discovery = "none"
    # Full discovery service URL e.g. https://authorize-dstu2.smarthealthit.org/.well-known/openid-configuration (required if 'authz-server-discovery' is not none)
    # authz-server-discovery-url = ?
    # Path for the metadata of Authorization Server (required if 'authz-server-discovery' is none). See OAuth2 Discovery for required metadata attributes. An example file, authorization-server-metadata.json is given under resources of onfhir-core sub project.
    # authz-server-metadata-path = ?

    # Caching preferences for access tokens (both introspection, or jwt) accessToken -> Resolved Authz Context (scopes, etc).
    # Max capacity of cache (# of tokens)
    token-caching-max-capacity = 1000
    # Initial capacity of cache (# of tokens)
    token-caching-initial-capacity = 100
    # Time to live for each token (in minutes)
    token-caching-time-to-live = 30
    # Idle time for each token to remove it from the cache (in minutes)
    token-caching-time-to-idle = 10
  }

  # Configuration for auditing the FHIR interactions executed on this server
  auditing {
    # Auditing mechanism to use;
    # 'local' -> means we will store them locally to this FHIR repository instance as FHIR AuditEvent resources
    # 'none' -> means no auditing
    # 'remote' -> means we send the FHIR AuditEvent records to an external FHIR repository that accepts FHIR AuditEvent resources
    # 'custom' -> means a custom auditing mechanism will be used. For this, you need to provide a custom module implementing io.onfhir.audit.ICustomAuditHandler and register it to OnFhir.
    repository = "none"

    # Base url of Audit Repository (if remote)
    # repository-url = "http://127.0.0.1:8082/audit-server"

    # Is Audit Repository secure? (if remote). If secure, we assume that the remote audit repository is Smart-on-FHIR compliant. Then before sending audits, onFhir server try to get an access token from the configured authorization server with scope "user/AuditEvent.write" and use that token in audit creation requests.
    # is-secure = false

    # If auditing mechanism is remote, onFhir sends the audit records in batches. This indicates the batch intervals in minutes. Default is 5 minutes.
    # batch-interval = 5
    # This indicates the maximum batch size. If # of audit records passed this amount or batch interval time comes, audits are send to remote server. Default is 50.
    # batch-size = 50
  }
}

# Configurations related with Akka.io platform (Do not change this unless you are a experienced user)
akka {
  stdout-loglevel = "OFF"
  loglevel = "OFF"
  #loggers = [akka.event.slf4j.Slf4jLogger]
  #loglevel = debug
  actor {
    #debug {
    #  receive = off
    #  lifecycle = off
    #}
    deployment {
      "/**" {
        dispatcher = "akka.actor.onfhir-blocking-dispatcher"
      }
    }
    onfhir-blocking-dispatcher {
      type = Dispatcher
      executor = "thread-pool-executor"
      thread-pool-executor {
        fixed-pool-size = 32
      }
      throughput = 1
    }
  }
}

# Configurations for Akka HTTP
akka.http {
  server {
    # Header for server
    server-header = OnFhir.io FHIR Repository
    parsing {
      uri-parsing-mode = relaxed
    }
    # Request timeout for all REST services (FHIR or non-FHIR)
    request-timeout = 60 s
    # Maximum inactivity time of a given HTTP connection
    idle-timeout = 60 s
    # Should be on in order to get IP address of the clients for audits
    remote-address-header = on
  }
}

# Configurations for Kafka integration
kafka {
  # Switch it to true if you want to send all created/deleted/updated FHIR resources to kafka as events
  enabled = false
  # Kafka broker hostname and port
  host = localhost
  port = 9092
  # Kafka topic for FHIR events
  topic = raw.fhir
  # Kafka client identifier for onFhir application
  client.id = onfhir
  # Comment out this line if you want to send all resource types created to Kafka. Otherwise you can add names of the resource types to monitor.
  # e.g. ["Observation", "Condition"] --> events will be sent only for these resource types
  enabled-resources = []
}

# MongoDB database configurations for onFhir server
mongodb {
  # The application can be run on an embedded MongoDB instance.
  # If embedded is true, then the following parameters are used to start the embedded instance up.
  # The binding will be done on 'host:port' parameters and the given 'db' will be created automatically.
  embedded = true

  # Host and ports for MongoDB databases (you can use multiple if it is a sharded cluster or replica set)
  host = "localhost:27019"
  #host= "localhost:27019,localhost:27020"
  # Database name for FHIR resources
  db = onfhir-test

  # By enabling sharding, onFhir initiates the sharding in the specied collections based on the configuration (See db-index-conf.json)
  sharding = false
  # Enable MongoDB transaction usage (only enable this if your MongoDB setup support it; if it is a replica set or sharded cluster)
  transaction = false

  #Uncomment below if MongoDB requires user authentication
  # Database name for MongoDB administration
  #authdb="admin"
  # Username to connect to database
  #username="admin"
  # Password to connect to database
  #password="5rdc"

  # MongoDB connection pooling configurations
  pooling {
    #minimum number of connections in pool
    minSize = 5
    #maximum number of connections in pool
    maxSize = 200
    #The maximum time that a thread may wait for a connection to become available. (in seconds)
    maxWaitTime = 180
    #The maximum time (in seconds) a pooled connection can live for. A zero value indicates no limit to the life time. A pooled connection that has exceeded its life time will be closed and replaced when necessary by a new connection.
    maxConnectionLifeTime = 1200
  }
}
