onfhir.client {
  # FHIR service base url
  #serverBaseUrl = ""
  authz {
    #Method for authorization (basic | oauth2) if you are constructing client from config
    #  - basic: HTTP basic authentication where username, password should be supplied
    #  - ouath2: Bearer token based authentication where token is obtained from a OAuth2.0 token endpoint
    #method = ""

    # If you will use BearerTokenInterceptorFromTokenEndoint, uncomment the following properties;
    # Assigned client identifier by the authorization server for your client
    #client_id = ""
    # Client secret given by the authorization server for your client
    #client_secret=""
    # URL of the OAuth2.0 Token endpoint of the authorization server
    #token_endpoint=""
    # Client authentication method; use either 'client_secret_basic', 'client_secret_post' or 'client_secret_jwt'
    #token_endpoint_auth_method =""

    #If you will use BasicAuthentication, uncomment the following
    #username = ""
    #password = ""
  }
}

akka.http {
  client {
    # The time period within which the TCP connecting process must be completed.
    connecting-timeout = 10s
    # The time after which an idle connection will be automatically closed.
    # Set to `infinite` to completely disable idle timeouts.
    idle-timeout = 60 s
  }
  host-connection-pool {
    # The maximum number of parallel connections that a connection pool to a
    # single host endpoint is allowed to establish. Must be greater than zero.
    max-connections = 10

    # The minimum number of parallel connections that a pool should keep alive ("hot").
    # If the number of connections is falling below the given threshold, new ones are being spawned.
    # You can use this setting to build a hot pool of "always on" connections.
    # Default is 0, meaning there might be no active connection at given moment.
    # Keep in mind that `min-connections` should be smaller than `max-connections` or equal
    min-connections = 0

    # The maximum number of times failed requests are attempted again,
    # (if the request can be safely retried) before giving up and returning an error.
    # Set to zero to completely disable request retries.
    max-retries = 5

    # The maximum number of open requests accepted into the pool across all
    # materializations of any of its client flows.
    # Protects against (accidentally) overloading a single pool with too many client flow materializations.
    # Note that with N concurrent materializations the max number of open request in the pool
    # will never exceed N * max-connections * pipelining-limit.
    # Must be a power of 2 and > 0!
    max-open-requests = 32

    # The maximum duration for a connection to be kept alive
    # This amount gets modified by a 10 percent fuzzyness to avoid the simultanous reconnections
    # defaults to 'infinite'
    # Note that this is only implemented in the new host connection pool
    max-connection-lifetime = infinite
    # The time after which an idle connection pool (without pending requests)
    # will automatically terminate itself. Set to `infinite` to completely disable idle timeouts.
    idle-timeout = 30 s
  }
}